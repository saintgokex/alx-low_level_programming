!<arch>
0-isupper.c/    0           0     0     644     210       `
#include "main.h"
/**
 * _isupper - prints uppercase
 * @c: int type character
 * Return: 1 if uppercase, 0 is otherwise
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     327       `
#include "main.h"
/**
 * *_memset - fills memory with a constant byte
 * @s: memory area to be filled
 * @b:char to copy
 * @n: number of times to copy b
 *
 * Return: pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);

}

0-strcat.c/     0           0     0     644     401       `
#include "main.h"
/**
 * *_strcat - concatenate a string to the end of another
 * @dest: param pointer to a char
 * @src: param pointer to a char
 * Return: return the value of dest
 */

char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}

	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}

	dest[i] = '\0';
	return (dest);


}

100-atoi.c/     0           0     0     644     392       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: the string to be converted
 *
 * Return: the integer value of the converted string
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int n = 0;

	do {
		if (*s == '-')
			sign *= -1;


		else if (*s >= '0' && *s <= '9')
			n = (n * 10) + (*s - '0');

		else if (n > 0)
			break;
	} while (*s++);

	return (n * sign);
}
1-isdigit.c/    0           0     0     644     223       `
#include "main.h"
/**
 * _isdigit - Returns 1 if c is a digit
 * @c: takes in a character
 * Return: 0 for uppercase, 1 for lowercase
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     320       `
#include "main.h"
/**
 * *_memcpy - copies memory area,
 * @dest: destination memory area.
 * @src: source memory area
 * @n: bytes filled.
 * Return: the pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
		*(dest + a) = *(src + a);

	return (dest);
}
1-strncat.c/    0           0     0     644     445       `
#include "main.h"
/**
 * _strncat - cat a string to the end of another
 * @dest: pointer to char param
 * @src: pointer to char param
 * @n: int parameter
 * Return: *dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int m;
	int i;

	m = 0;

	for (i = 0; i < 1000; i++)
	{
		if (dest[i] == '\0')
		{
			break;
		}
		m++;
	}

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[m + i] = src[i];
	}
	dest[m + i] = '\0';
	return (dest);
}

1-swap.c/       0           0     0     644     254       `
#include "main.h"

/**
 * swap_int - swaps the value of two integers
 * @a: first integer of type int
 * @b: second integer of type int
 * Return: values of swapped integers
 */

void swap_int(int *a, int *b)
{
	*a += *b;
	*b = *a - *b;
	*a = *a - *b;
}
2-strchr.c/     0           0     0     644     338       `
#include "main.h"
/**
 * _strchr - a function that locates aa character in a string
 * @s: string
 * @c: the char in s
 * Return: the first occurrence or NULL
 */
char *_strchr(char *s, char c)
{
	int a;

	for (a = 0; s[a] != '\0'; a++)
	{
		if (s[a] == c)
			return (s + a);
	}
	if (s[a] == c)
		return (s + a);
	else
		return ('\0');
}
2-strncpy.c/    0           0     0     644     346       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: pointer to a char param
 * @src: pointer to a char param
 * @n: int param
 * Return: @dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[i] = src[i];
	}

	for (; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     233       `
#include "main.h"
/**
 * _islower - checks for lowercase (ascii code 97 to 122)
 *@c: char type letter
 * Return: As 1 if lowercase, as 0 if not
 */
int _islower(int c)
{
	if (c > 96 && c < 123)
		return (1);
	else
		return (0);


}

3-puts.c/       0           0     0     644     147       `
#include "main.h"
/**
 * _puts - prints a string
 * @str: string
 */
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);

	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     304       `
#include "main.h"
/**
 * _strcmp - compare two strings
 * @s1: pointer to char param
 * @s2: pointer to char param
 * Return: *dest
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int R;

	i = 0;

	while (s1[i] == s2[i] && (s1[i] != '\0' || s2[i] != '\0'))
	{
		i++;
	}
	R = s1[i] - s2[i];
	return (R);
}
3-strspn.c/     0           0     0     644     512       `
#include "main.h"
/**
 * _strspn - a function that gets the length of a prefix substring
 * @s: character
 * @accept: character string
 *
 * Return: returns numner of bytes in the initial segemnt s which
 * consists of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	int a;
	int b;
	int c = 0;

	for (a = 0; s[a] != '\0'; a++)
	{
		for (b = 0; accept[b] != '\0'; b++)
		{
			if (s[a] == accept[b])
			{
				c++;
				break;
			}
		}
		if (accept[b] == '\0')
			return (c);
	}
	return (c);

}
4-isalpha.c/    0           0     0     644     252       `
#include "main.h"
/**
 * _isalpha - checks if c is an alphabet
 * @c: char type
 * Return: 1 if it's an alphabet, 0 if not
 */
int _isalpha(int c)
{
	if (c < 91 && c > 64)
		return (1);
	else if (c < 123 && c > 96)
		return (1);
	else
		return (0);

}
4-strpbrk.c/    0           0     0     644     361       `
#include "main.h"
/**
 * _strpbrk - function searches string for any set of bytes
 * @s: string
 * @accept: string
 * Return: a pointer to the byte in s
 */

char *_strpbrk(char *s, char *accept)
{
	int a;
	int b;

	for (a = 0; s[a] != '\0'; a++)
	{
		for (b = 0; accept[b] != '\0'; b++)
		{
			if (s[a] == accept[b])
				return (s + a);
		}
	}
	return (0);
}


5-strstr.c/     0           0     0     644     517       `
#include "main.h"
/**
 * _strstr - this function locates a substring
 * @haystack: character string
 * @needle: character string
 * Return: a pointer to the beginning of substring ir NULL
 */
char *_strstr(char *haystack, char *needle)
{
	int a;
	int b;
	int c;

	for (a = 0; haystack[a] != '\0'; a++)
	{
		for (c = a, b = 0; needle[b] != '\0'; b++, c++)
		{
			if (needle[b] != haystack[c] || haystack[c] == '\0')
			{
				break;
			}
		}
		if (needle[b] == '\0')
		{
			return (haystack + a);
		}
	}
	return (0);
}

6-abs.c/        0           0     0     644     200       `
#include "main.h"
/**
 * _abs - compute absolute value of an integer
 * @n: int type number
 * Return: absolute value of @n
 */
int _abs(int n)
{
	if (n < 0)
		return (n * -1);
	else
		return (n);

}
9-strcpy.c/     0           0     0     644     432       `
#include "main.h"

/**
 * _strcpy - copies a string pointed to by @src, including the
 * terminating null byte, to a buffer pointed to by @dest.
 * @dest: a buffer to copy the string to .
 * @src: a cource string to copy.
 *
 * Return: a pointer to the destination string @dest.
 */

char *_strcpy(char *dest, char *src)
{
	int i = 0;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     241       `
#include <unistd.h>
/**
 * main - writes the character c to stdout
 * @c: the character to print
 *
 * Return: On success 1
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, @c, 1));
}

